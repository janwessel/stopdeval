function settings = SD1settings

% Manual inputs
prompts = { 'Exp1: Magnitudes (1x4 vector)',...
                    'Exp1: Dispersion',...
                    'Exp1: Rewarded trials (per symbol)',...
                    'Exp1: Non-rewarded trials (per symbol)',...
                    'Exp1: Blocks',...
                    'Exp2: Trials (per symbol)',...
                    'Exp2: Blocks',...
                    'Exp2: Initial SSD',...
                    'Exp3: Trials (per symbol)',...
                    'Exp3: Blocks',...
                    'Exp3: "6keys" or "select"?',...
                    };
defs = {        '[50 100 200 400]';...
                    '25';...
                    '60';...
                    '12';...
                    '6';...
                    '44';...
                    '11';...
                    '200';...
                    '10';...
                    '4';...
                    '6keys';...
                    };
inputs = inputdlg(prompts,'Experiment 1',1,defs);
if isempty(inputs); inputs = defs; end

% durations (only changed in file)
settings.duration.fix = .5;
settings.duration.learnstim = 1;
settings.duration.learntrial = 3;
settings.duration.stopstim = 1.5;
settings.duration.stoptrial = 3;
settings.duration.reward = 1; % for both reward and feedback in both stopping and learning
settings.duration.betstim = 5;
settings.duration.bettrial = 6;
settings.duration.betdelay = 1.5;

% learning (some command line options)
settings.learning.magnitudes = str2num(inputs{1});
settings.learning.parameter = str2num(inputs{2}); % if normal: SD, if uniform: range (+/-)
settings.learning.trials = str2num(inputs{3}); % per symbol
settings.learning.zerotrials = str2num(inputs{4}); % per symbol (trials with zero reward. controls prob of rew.
settings.learning.blocks = str2num(inputs{5});
settings.learning.distribution = 'uniform'; % normal / uniform

% stopping (some command line options)
settings.stopping.trials = str2num(inputs{6}); % per symbol
settings.stopping.blocks = str2num(inputs{7});
settings.stopping.SSD = str2num(inputs{8});
settings.stopping.prob = [0 .75]; % low high
settings.stopping.SSDincrement = 50;

% bidding (some command line options)
settings.betting.trials = str2num(inputs{9}); % per symbol
settings.betting.blocks = str2num(inputs{10});
settings.betting.stepsize = 6; % if this is changed, buttons must be changed, too
settings.betting.start = 30;
settings.betting.levels = settings.betting.trials/2;    
settings.betting.scalingfactor = 5; % distance between different option sets in C
settings.betting.type = inputs{11};

% buttons (from command line)
ListenChar(2); HideCursor; % hide cursor and don't read kb
KbName('UnifyKeyNames'); % unify keyboard
DisableKeysForKbCheck('empty');
disp('Press button for top left response (Phase 1): ');
settings.buttons.nw = KbName; disp(settings.buttons.nw); settings.buttons.nw = KbName(settings.buttons.nw);
disp('Press button for top right response (Phase 1): ');
settings.buttons.ne = KbName; disp(settings.buttons.ne); settings.buttons.ne = KbName(settings.buttons.ne);
disp('Press button for bottom left response (Phase 1): ');
settings.buttons.sw = KbName; disp(settings.buttons.sw); settings.buttons.sw = KbName(settings.buttons.sw);
disp('Press button for bottom right response (Phase 1): ');
settings.buttons.se = KbName; disp(settings.buttons.se); settings.buttons.se = KbName(settings.buttons.se);
if strcmpi(settings.betting.type,'6keys')
    disp('Press button for left response (Phase 2): ');
    settings.buttons.left = KbName; disp(settings.buttons.left); settings.buttons.left = KbName(settings.buttons.left);
    disp('Press button for right response (Phase 2): ');
    settings.buttons.right = KbName; disp(settings.buttons.right); settings.buttons.right = KbName(settings.buttons.right);
else settings.buttons.left = settings.buttons.nw; settings.buttons.right = settings.buttons.ne;
end
settings.buttons.bets = [...
                                        KbName('d'); ...
                                        KbName('f'); ...
                                        KbName('g'); ...
                                        KbName('h'); ...
                                        KbName('j'); ...
                                        KbName('k'); ...
                                        ];
ShowCursor; ListenChar(0);
